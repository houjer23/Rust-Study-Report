## 第一章：计算机系统漫游

> #### 解释程序、进程和线程之间的区别和联系。
> 程序（Program）：程序是一组指令的集合，用于描述完成特定任务的计算机操作序列。<br>
> 进程（Process）：进程是一个正在执行的程序，有有限的生命周期。进程可以包含一个或多个线程。<br>
> 线程（Thread）：线程是进程中的一个执行路径，是进程中更小的执行单元。

描述静态链接和动态链接的区别，并讨论它们的优缺点。
-- 在静态链接（Static Linking）时，目标文件和库文件被合并为一个单独的可执行文件，这意味着可执行文件包含了所有需要的代码和数据。在运行时，可执行文件不再依赖外部的库文件。
-- 在动态链接（Dynamic Linking）时，可执行文件只包含了程序本身的代码和一些引用外部库的指令。在程序启动时，操作系统会根据需要加载所需的共享库，并将它们与程序进行链接。这意味着多个程序可以共享同一份库文件，节省了内存空间。

什么是虚拟内存？它的主要目的是什么？如何实现虚拟内存？
-- 虚拟内存（Virtual Memory）将计算机的硬盘空间扩展为可供程序使用的额外内存空间。虚拟内存的主要目的是为了解决计算机系统中内存限制的问题。它允许程序使用比实际物理内存更大的地址空间，使得每个程序可以使用更多的内存而不受物理内存大小的限制。实现虚拟内存的关键技术是分页（Paging）。

## 第二章：信息的表示和处理

解释无符号整数和补码整数的表示方法，并比较它们的差异。
-- 无符号整数（Unsigned Integer）：无符号整数是一种表示非负整数的方法，数值范围从0到最大值。因为最大位不需要代表符号，所以最大值要比补码整数大一倍。
-- 补码整数（Two's Complement Integer）：补码整数是一种表示有符号整数的方法，它使用最高位作为符号位，表示数值的正负。补码整数的最高位为0表示正数，为1表示负数。其他数位跟无符号整数相同。

如何使用位运算实现乘法和除法操作？
-- 乘法需要左移，往后加0，然后去掉多出的数位
-- 除法直接右移就行

什么是浮点数表示法？解释规范化和非规范化浮点数的概念。
-- 浮点数表示法用来表示带有小数点的数。规范化是IEEE浮点标准，而非规范化是整数加小数点加小数。

第三章：程序的机器级表示

解释指令集体系结构（ISA）的概念和作用。
什么是汇编语言？描述汇编语言和机器语言之间的关系。
解释程序计数器（PC）和栈指针（SP）在程序执行过程中的作用。
第四章：处理器体系结构

描述冯·诺伊曼计算机体系结构的基本原理。
解释指令流水线的概念，并讨论其优势和局限性。
什么是数据相关和控制相关？如何通过插入气泡（bubble）来解决数据相关性？
第五章：优化程序性能

解释代码优化的目标是什么？列举至少三种常见的代码优化技术。
什么是数据相关性？解释数据相关性对于循环的性能有什么影响？
描述循环展开（loop unrolling）的概念，并讨论它的优缺点。
什么是依赖于控制的分支（control-dependent branch）？解释如何通过预测分支的方向来提高性能。
解释循环不变代码（loop-invariant code）是什么，并说明它在循环优化中的作用。
什么是数据流分析？描述如何使用数据流分析来优化程序性能。
第六章：存储器层次结构

解释存储器层次结构的目的和工作原理。
描述局部性原理，并解释它对于存储器性能的重要性。
什么是缓存行（cache line）？解释缓存行对于缓存访问的影响。
解释写回（write-back）和写直通（write-through）策略的区别，并比较它们的优缺点。
什么是写命中（write hit）和写不命中（write miss）？解释如何处理写不命中。
描述虚拟内存和物理内存之间的映射关系，并讨论页表的作用。
第七章：链接

解释静态链接和动态链接的区别，并讨论它们的优缺点。
描述符号解析的过程，包括符号解析的顺序和解析冲突的处理方法。
什么是重定位？解释链接器如何执行重定位操作。
解释静态库和动态库的概念，并比较它们的特点和使用场景。
什么是链接器脚本（linker script）？描述链接器脚本的作用和用法。
解释动态链接的加载过程，包括动态链接器的作用和库的加载顺序。
描述符号表的结构和内容，并解释如何使用符号表进行符号解析。
什么是重定位表（relocation table）？解释重定位表的作用和格式。
解释PLT（Procedure Linkage Table）和GOT（Global Offset Table）的概念，并讨论它们在动态链接中的作用。
第八章：异常控制流

解释异常的概念和异常处理的作用。
描述用户级别异常和内核级别异常之间的区别和联系。
什么是信号（signal）？解释信号的产生和处理过程。
解释进程（process）的概念，并讨论进程的创建和终止过程。
描述进程上下文切换（context switch）的概念和步骤。
什么是系统调用（system call）？解释系统调用的目的和执行过程。
解释虚拟内存中的页面错误（page fault）是什么，并描述页面错误处理的过程。
什么是共享内存（shared memory）？解释共享内存的概念和使用方法。
描述线程（thread）的概念，并讨论线程与进程之间的区别和联系。
