## 第一章：计算机系统漫游

#### 解释程序、进程和线程之间的区别和联系。
程序（Program）：程序是一组指令的集合，用于描述完成特定任务的计算机操作序列。<br>
进程（Process）：进程是一个正在执行的程序，有有限的生命周期。进程可以包含一个或多个线程。<br>
线程（Thread）：线程是进程中的一个执行路径，是进程中更小的执行单元。

#### 描述静态链接和动态链接的区别，并讨论它们的优缺点。
在静态链接（Static Linking）时，目标文件和库文件被合并为一个单独的可执行文件，这意味着可执行文件包含了所有需要的代码和数据。在运行时，可执行文件不再依赖外部的库文件。<br>
在动态链接（Dynamic Linking）时，可执行文件只包含了程序本身的代码和一些引用外部库的指令。在程序启动时，操作系统会根据需要加载所需的共享库，并将它们与程序进行链接。这意味着多个程序可以共享同一份库文件，节省了内存空间。<br>

#### 什么是虚拟内存？它的主要目的是什么？如何实现虚拟内存？
虚拟内存（Virtual Memory）将计算机的硬盘空间扩展为可供程序使用的额外内存空间。虚拟内存的主要目的是为了解决计算机系统中内存限制的问题。它允许程序使用比实际物理内存更大的地址空间，使得每个程序可以使用更多的内存而不受物理内存大小的限制。实现虚拟内存的关键技术是分页（Paging）。

## 第二章：信息的表示和处理

#### 解释无符号整数和补码整数的表示方法，并比较它们的差异。
无符号整数（Unsigned Integer）：无符号整数是一种表示非负整数的方法，数值范围从0到最大值。因为最大位不需要代表符号，所以最大值要比补码整数大一倍。<br>
补码整数（Two's Complement Integer）：补码整数是一种表示有符号整数的方法，它使用最高位作为符号位，表示数值的正负。补码整数的最高位为0表示正数，为1表示负数。其他数位跟无符号整数相同。

#### 如何使用位运算实现乘法和除法操作？
乘法需要左移，往后加0，然后去掉多出的数位<br>
除法直接右移就行

#### 什么是浮点数表示法？解释规范化和非规范化浮点数的概念。
浮点数表示法用来表示带有小数点的数。规范化是IEEE浮点标准，而非规范化是整数加小数点加小数。

## 第三章：程序的机器级表示

#### 解释指令集体系结构（ISA）的概念和作用。
指令集体系结构（Instruction Set Architecture，ISA）是一种定义了计算机体系结构中可执行的指令集合、指令格式、寄存器、内存模型等的规范。ISA定义了计算机硬件和软件之间的接口，决定了计算机体系结构的特性和功能。

#### 什么是汇编语言？描述汇编语言和机器语言之间的关系。
机器语言是计算机能够直接执行的二进制指令序列，它由0和1组成，代表特定的操作和数据处理。而汇编语言是机器语言的助记符表示形式，将复杂的二进制指令序列转化为更容易理解和编写的文本形式。

#### 解释程序计数器（PC）和栈指针（SP）在程序执行过程中的作用。
程序计数器是每当每个指令被获取，程序计数器的存储地址加一，这样就可以得知下一次该运行哪一个指令<br>
堆栈指针是一个寄存器，用于存储最后添加到堆栈中的数据元素的内存地址，或者在某些情况下，堆栈中的第一个可用地址。

## 第四章：处理器体系结构

#### 描述冯·诺伊曼计算机体系结构的基本原理。
冯·诺伊曼提出计算机将由二进制进行存储和运算。计算机有五个部分组成：运算器、控制器、存储器、输入设备、输出设备。

#### 解释指令流水线的概念，并讨论其优势和局限性。
指令流水线将指令的执行过程划分为多个阶段，由此可在同一时间段内同时执行多条指令的不同阶段，可以提高计算机的执行效率。局限1（数据相关性）：然而如果一个指令需要前面一个指令运行玩再执行，则必须等待才可运行。局限2（控制相关性）：如果一个指令是jump指令，计算机会对下一条运行哪个进行预判。若预判错误则会影响性能。

### 什么是数据相关和控制相关？如何通过插入气泡（bubble）来解决数据相关性？
数据相关性：然而如果一个指令需要前面一个指令运行玩再执行，则必须等待才可运行。<br>
控制相关性：如果一个指令是jump指令，计算机会对下一条运行哪个进行预判。若预判错误则会影响性能。<br>
气泡（bubble）：强制使后续指令在前一指令的结果计算完成之前暂停执行。

## 第五章：优化程序性能

#### 解释代码优化的目标是什么？列举至少三种常见的代码优化技术。
代码优化的目的是使程序运行得更快。技术1高级设计：修改算法和数据结构。技术2基本编码原则：消除不必要的内存引用。技术3低级优化：根据汇编语言的逻辑进行优化。

#### 什么是数据相关性？解释数据相关性对于循环的性能有什么影响？
数据相关性：当前指令需要前面一个指令运行玩再执行，因此程序员可以在代码中减少数据相关性的使用，从而增强代码性能。

#### 描述循环展开（loop unrolling）的概念，并讨论它的优缺点。
循环展开可以减少循环的数量，在每个循环中进行更多操作，从而增强代码性能。不过这将占用更多空间。

#### 什么是依赖于控制的分支（control-dependent branch）？解释如何通过预测分支的方向来提高性能。
依赖于控制的分支是指程序中根据条件或变量值来决定执行路径的代码，比如if语句或循环语句。预测分支的方向可以加快程序的执行。分支预测器是一种硬件机制，用来猜测分支是否会被执行。如果预测正确，CPU就可以继续按照预测的路径加载指令，避免等待分支结果的延迟。如果预测错误，则需要废弃已预测的指令，并重新加载正确的路径。

#### 解释循环不变代码（loop-invariant code）是什么，并说明它在循环优化中的作用。
循环不变代码是指在循环中的某个值在整个循环过程中保持不变。将循环不变代码移动到循环外部而不改变程序的语义可对循环进行大幅度优化。

#### 什么是数据流分析？描述如何使用数据流分析来优化程序性能。
数据流分析是一种使用图形符号表示程序执行过程中可能经过的所有路径。可通过减少数据相关性，去除无效代码，赋值削减，循环优化增强程序性能。

## 第六章：存储器层次结构

#### 解释存储器层次结构的目的和工作原理。
存储器层次结构的目的是提高计算机系统的性能和效率。它将不同速度和容量的存储设备组织在一起，以满足不同的访问需求。存储器层次结构从最高层到最底层是寄存器，SRAM高速缓存，DRAM内存，磁盘，以及远程服务器磁盘。最高层访问速度最快，存储空间最小。最低层访问速度最慢，存储空间最大。

#### 描述局部性原理，并解释它对于存储器性能的重要性。
局部性原理是指程序在执行过程中，倾向于访问一部分数据或指令的趋势。它包括时间局部性和空间局部性。时间局部性表示如果一个数据或指令被访问过一次，那么在不久的将来它很可能会再次被访问。换句话说，最近访问的数据或指令被频繁使用的概率较大。空间局部性表示如果一个数据或指令被访问，那么与之相邻的数据或指令也很可能会被访问。换句话说，连续的数据或指令被频繁使用的概率较大。局部性原理对于存储器性能非常重要。因为当程序具有良好的局部性时，存储器系统可以利用缓存技术来提高数据访问效率。

#### 什么是缓存行（cache line）？解释缓存行对于缓存访问的影响。
缓存行（cache line）是连续的存储空间，用于存储从主存中读取的数据或指令。当CPU需要读取数据或指令时，会首先查找缓存。如果所需数据或指令正好在某个缓存行中，那么这个操作就称为缓存命中（cache hit）。在缓存命中的情况下，CPU可以快速地获取所需数据，并且相应的计算或执行能够立即进行。在缓存未命中（cache miss）的情况下，CPU需要从主存中加载整个缓存行到缓存中，这个过程涉及较长的访问延迟和额外的数据传输。

#### 解释写回（write-back）和写直通（write-through）策略的区别，并比较它们的优缺点。
写回（write-back）和写直通（write-through）是两种不同的缓存写策略。<br>
写回策略：当有数据要写入缓存时，先将数据存储在缓存中，而不是直接写入主存。只有当该数据被替换出缓存或者需要被读取时，才将其写回主存。这样可以减少对主存的频繁写入，提高系统性能。<br>
写直通策略：当有数据要写入缓存时，同时将数据写入缓存和主存，保持缓存和主存的一致性。每次写操作都会导致对主存的写入，但可以保证数据的一致性。

#### 什么是写命中（write hit）和写不命中（write miss）？解释如何处理写不命中。
写命中（write hit）指的是当CPU要向缓存写入数据时，所需写入的数据已经在缓存中存在的情况。写不命中（write miss）则相反，即所需写入的数据在缓存中不存在。当发生写不命中时，首先检查主存中是否存在需要写入的数据。如果主存中存在该数据，则将数据从主存读取到缓存中，并进行修改操作。如果主存中不存在该数据，需要通过在其他缓存或者主存中搜索，确定该数据的位置，并将其读取到当前缓存中。

#### 描述虚拟内存和物理内存之间的映射关系，并讨论页表的作用。
虚拟内存和物理内存之间的映射关系是通过页表来实现的。虚拟内存就像一个假想的内存空间，它比实际的物理内存空间大得多。我们可以把虚拟内存看作是一本书，每一页都有一个地址。而物理内存则是实际存在于计算机中的内存空间，就像一块真实的硬盘。页表就像一张索引表，记录了虚拟内存页面和物理内存页面之间的对应关系。它告诉系统哪个虚拟页面对应哪个物理页面。当程序需要访问某个虚拟地址时，系统会根据页表找到对应的物理地址，并从物理内存中读取或写入数据。如果页表中不存在对应关系，就需要进行一些额外的工作，例如将数据从磁盘加载到物理内存中，然后更新页表以建立映射关系。

## 第七章：链接

#### 解释静态链接和动态链接的区别，并讨论它们的优缺点。
#### 描述符号解析的过程，包括符号解析的顺序和解析冲突的处理方法。
#### 什么是重定位？解释链接器如何执行重定位操作。
#### 解释静态库和动态库的概念，并比较它们的特点和使用场景。
#### 什么是链接器脚本（linker script）？描述链接器脚本的作用和用法。
#### 解释动态链接的加载过程，包括动态链接器的作用和库的加载顺序。
#### 描述符号表的结构和内容，并解释如何使用符号表进行符号解析。
#### 什么是重定位表（relocation table）？解释重定位表的作用和格式。
#### 解释PLT（Procedure Linkage Table）和GOT（Global Offset Table）的概念，并讨论它们在动态链接中的作用。

## 第八章：异常控制流

#### 解释异常的概念和异常处理的作用。
#### 描述用户级别异常和内核级别异常之间的区别和联系。
#### 什么是信号（signal）？解释信号的产生和处理过程。
#### 解释进程（process）的概念，并讨论进程的创建和终止过程。
#### 描述进程上下文切换（context switch）的概念和步骤。
#### 什么是系统调用（system call）？解释系统调用的目的和执行过程。
#### 解释虚拟内存中的页面错误（page fault）是什么，并描述页面错误处理的过程。
#### 什么是共享内存（shared memory）？解释共享内存的概念和使用方法。
#### 描述线程（thread）的概念，并讨论线程与进程之间的区别和联系。
